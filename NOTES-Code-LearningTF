MultiRNN_supervised_embeddings.py
---------------------------------
* Instrumented for tfdbg

* embeddings table of the required shape, created in the operation 
tf.Variable. The table is initialized to random_uniform values in the range(-1.0, 1.0)

* LSTMStateTuple (c, h). Links documenting c & h added


Projector-embeddings-Odd-Even-NOTA.py 
-------------------------------------
renamed as
----------
Visualization-logits_Odd_Even_NOTA_Sentences.py
-------------------------------------
* embeddings table as done above.

* Factored out 
    ** generation of data sentences
    ** metrics computation using python

* Note, import of constants

* Projector display now for both input data and output logits

Visualization-Data_Odd_Even_NOTA_Sentences.py
---------------------------------------------
* File was earlier named EmbeddingsVisualization_Data_Odd_Even_NOTA_Sentences.py

* THIS is the one which produces the visualization files for Odd, Even, & NOTA sentences.

* The files are in logdir=/home/rm/logs/Visualization-Data-Odd_Even_NOTA_Sentences/

* *** Now can embed two variables ***. The projector makes available both embeddings for view.

LSTM_supervised_embeddings.py
------------------------------
* embeddings table as done above and by using the table ***embeddings_3point*** designed
by me. Plenty of assertions of my understanding of embeddings

* QUESTION about modulo lookup mentioned in documentation

* Has wrapper for running with tfdbg

* Takes command line arguments

LSTM_embeddings-Odd-Even-NOTA.py
--------------------------------
* embedding using Variable initialized as in MultiRNN_supervised_embeddings.py.

* *** Daisy-chained tf.Print ***

* Use of tf.py_func to call the existing function label_to_one_hot(). 
This was to convert the predicted label to one-hot so that it could be compared 
with true one-hot labels. See comments in code for reasons.

* Factored out (as in Visualization-logits_Odd_Even_NOTA_Sentences.py)
    ** generation of data sentences
    ** metrics computation using python

BasicRNNCell.py
---------------

-------------------------------------------------------
* 