.gitignore
----------
* REUSE

MultiRNN_supervised_embeddings.py
---------------------------------
* Instrumented for tfdbg

* embeddings table of the required shape, created in the operation 
tf.Variable. The table is initialized to random_uniform values in the range(-1.0, 1.0)

* LSTMStateTuple (c, h). Links documenting c & h added


Projector-embeddings-Odd-Even-NOTA.py 
-------------------------------------
renamed as
----------
Visualization-logits_Odd_Even_NOTA_Sentences.py
-------------------------------------
* embeddings table as done above.

* Factored out 
    ** generation of data sentences
    ** metrics computation using python

* Note, import of constants

* Projector display now for both input data and output logits

Visualization-Data_Odd_Even_NOTA_Sentences.py
---------------------------------------------
* File was earlier named EmbeddingsVisualization_Data_Odd_Even_NOTA_Sentences.py

* THIS is the one which produces the visualization files for Odd, Even, & NOTA sentences.

* The files are in logdir=/home/rm/logs/Visualization-Data-Odd_Even_NOTA_Sentences/

* *** Now can embed two variables ***. The projector makes available both embeddings for view.

LSTM_supervised_embeddings.py
------------------------------
* embeddings table as done above and by using the table ***embeddings_3point*** designed
by me. Plenty of assertions of my understanding of embeddings

* QUESTION about modulo lookup mentioned in documentation

* Has wrapper for running with tfdbg

* Takes command line arguments

LSTM_embeddings-Odd-Even-NOTA.py
--------------------------------
* embedding using Variable initialized as in MultiRNN_supervised_embeddings.py.

* *** Daisy-chained tf.Print ***

* Use of tf.py_func to call the existing function label_to_one_hot(). 
This was to convert the predicted label to one-hot so that it could be compared 
with true one-hot labels. See comments in code for reasons.

* Factored out (as in Visualization-logits_Odd_Even_NOTA_Sentences.py)
    ** generation of data sentences
    ** metrics computation using python

BasicRNNCell.py
---------------

/home/rm/Code-LearningTF/06__word_embeddings_and_rnns/word2vec.py
-------------------------------------------------------

06__word_embeddings_and_rnns/CompareEmbeddings-PreTrained-vs-Generated.py
-------------------------------------------------------------------------
* Use of python's zipfile module to process .zip files.
* asserts with iteration using list comprehension. (For comprehension
Ref Comprehending Comprehensions in "Python Tricks: A Buffet of Awesome Python 
Features (p. 212)". Kindle edn).
* Division of tensor object by another.
* Extended slicing
* Repeatable random numbers using seed.

/home/../07__abstractions/04._Contrib_learn-FeatureColumns-Estimator-Locn_4081.py
--------------------------------------------------------------------------------
* Abstraction: Linear Regressor. No need for user to build a graph and invoke a 
session
* 
* Select items from a list of N items, using the indices of a second list. 
    ** The 2nd list should have boolean values. 
    ** The length of both lists should be equal.
    ** The indices at which the 2nd list has values of True, are indices
    that are used to retrieve items from the 1st list.
 * All items in a list can be checked if any of them meet any given condition.
 This is done in a single statement - not in a loop. The result is a boolean
 list of the same length. Its elements have a value of True at the indices for which
 the condition was met.
 * Histogram & X-Y plot  

/home/rm/Code-LearningTF/07__abstractions/06._TFLearn-CNN-Locn_4327.ipynb
-------------------------------------------------------------------------
* Abstraction: 
        "The tflearn.DNN() function ...
        — it’s the DNN model wrapper with which we instantiate the model 
        and to which we pass our constructed network."
* Creates "instrument-panel" type display of progress see plain text listing of 
the file (saved with output) for how it is done. Running the .py file does not create an 
"instrument-pane". Rather it appears as list of prints of "screen-shots" of the
instrument-panel

